const testingScope = (escopo) => {
    if (escopo === true) {
        let ifScope = `NÃ£o devo ser utilizada fora do meu escopo (if)`;
        ifScope = `${ifScope} Ã³timo, fui utilizada no escopo !`;
        console.log(ifScope);
    } else {
        let elseScope = `NÃ£o devo ser utilizada fora meu escopo (else)`;
        console.log(elseScope);
    }
}

testingScope(true);

// ğŸš€ Altere as variÃ¡veis para respeitarem o escopo em que foram declaradas.
// Modifique a estrutura da funÃ§Ã£o para que ela seja uma arrow function;
// Modifique as variÃ¡veis para que respeitem o escopo onde estÃ£o declaradas;
// Modifique as concatenaÃ§Ãµes para template literals.



const oddsAndEvens = [13, 3, 4, 10, 7, 2];

const orderedArray = (param) => {
    param.sort(function(a,b){
        if (a > b) {
            return 1;
        } else if (a < b) {
            return -1;
        }
        return 0;
    })
    return param
}
console.log (`Os nÃºmeros ${orderedArray(oddsAndEvens)} se encontram ordenados de forma crescente!`);



// ğŸš€ Crie uma funÃ§Ã£o que retorne um array em ordem crescente.
// Crie uma funÃ§Ã£o que faÃ§a com que o array oddsAndEvens fique na ordem crescente;
// Utilize o console.log e template literals para retornar a frase: 'Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.
// Utilize template literals para que a chamada console.log(<seu cÃ³digo>oddsAndEvens<seu cÃ³digo>); retorne a frase "Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".



const fatorial = (n) => {
    let resultado = 1;
    for ( let counter = 2; counter <= n; counter += 1) {
        resultado = resultado * counter
    } 
    
    return resultado
    
}
console.log(fatorial(6))



// Crie uma funÃ§Ã£o que receba uma frase e retorne a maior palavra.

let longestWord = (phrase) => {
    let longest = phrase.split(' ')[0].length;
    let lWord = phrase.split(' ')[0];
    for (const word of phrase.split(' ')) {
        if (word.length >   longest) {
            largest = word.length;
            lWord = word
        }
    }
    return lWord
}

console.log(longestWord('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu'))


let longestWord2 = (phrase) => {
    return phrase.split(' ').sort((a, b) => a.length > b.length ? 1 : -1)[phrase.split(' ').length -1]
}

console.log(longestWord2('AntÃ´nio foi no banheiro e nÃ£o sabemos o que aconteceu'));


// Crie duas funÃ§Ãµes JavaScript com as seguintes especificaÃ§Ãµes:
// NÃ£o se esqueÃ§a de usar template literals
// FunÃ§Ã£o 1: Escreva uma funÃ§Ã£o que substitua a letra 'x' em uma frase.
// A funÃ§Ã£o deverÃ¡ receber um nome por parÃ¢metro;
// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome frase, do tipo const e com o valor igual a 'Tryber x aqui!';
// A funÃ§Ã£o deverÃ¡ retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substituÃ­do pelo nome passado por parÃ¢metro.
// Exemplo:
// ParÃ¢metro: 'Bebeto'
// Retorno: 'Tryber Bebeto aqui!'
// FunÃ§Ã£o 2: Escreva uma funÃ§Ã£o que irÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro e retornarÃ¡ uma nova string.
// A funÃ§Ã£o deverÃ¡ receber o retorno da FunÃ§Ã£o 1 por parÃ¢metro;
// Declare dentro da funÃ§Ã£o uma variÃ¡vel com o nome skills, do tipo const;
// A variÃ¡vel skills deverÃ¡ ser um array contendo trÃªs strings com tecnologias que vocÃª jÃ¡ aprendeu.
// Concatene o valor retornado da FunÃ§Ã£o 1, a frase 'Minhas trÃªs principais habilidades sÃ£o:' e o valor da variÃ¡vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas trÃªs principais habilidades sÃ£o:
// JavaScript
// HTML
// CSS



const replace = (nome) => {
    const frase = "Tryber x aqui!";
    let novaFrase = '';
    for (const letter of frase) {
        letter === 'x' ? novaFrase = `${novaFrase}${nome}` : novaFrase = `${novaFrase}${letter}`;
    }
    return novaFrase;
}

console.log(replace ('Joao'))


const newString = (replace) => {
    const skills = ['javascript', 'HTML', 'CSS'];
    let resultado = `
    ${replace}
    Minhas trÃªs principais habilidades sÃ£o:`
    for (const skill of skills) {
        resultado += `
    - ${skill}`
    }
    return resultado
}

console.log(newString(replace('Marcos')))